# Master tasks, except the ones we run as preparation
# Includes tool installation, postgres configuration, SGE and proFTPd install
---
- name: Setup postgres user
  user: name=postgres state=present

- name: Install system packages
  apt: pkg={{ item }} state=installed
  with_flattened:
    - ${master_packages}

- name: Install python libraries
  pip: name={{ item }} state=present
  with_flattened: master_pip_pkgs

# Slurm-drmaa
- name: Get slurm-drmaa source
  get_url: url={{ slurm_drmaa_url }} dest=/tmp/slurm-drmaa.tar.gz
- name: Unpack slurm-drmaa source
  command: tar xvfz slurm-drmaa.tar.gz chdir=/tmp
- name: Configure slurm-drmaa
  command: ./configure --with-slurm-inc=/usr/include/slurm --with-slurm-lib=/usr/lib 
           chdir=/tmp/{{ slurm_drmaa_pkg }}
- name: Make slurm-drmaa
  command: make chdir=/tmp/{{ slurm_drmaa_pkg }}
- name: Install slurm-drmaa
  command: make install chdir=/tmp/{{ slurm_drmaa_pkg }}


# Install Galaxy dependencies DB, Grid, FTP server

#- name: Create SGE package tmp location
#  file: path=/tmp/sge state=directory
#- name: Fetch SGE
#  get_url: url={{sge_location}}/{{sge_download}} dest=/tmp/sge/{{sge_download}}
#- name: Unpack SGE
#  command: tar xvfz /tmp/sge/{{ sge_download }} chdir=/tmp/sge/
## its 2 tar.gzs within a tar.gz here, so two unpacks
#- name: Unpack SGE inner packages
#  command: tar xvfz /tmp/sge/ge6.2u5/{{ item }} chdir={{ sge_root }}
#  with_items: sge_packages
#- name: Changing ownership of sge dirs
#  file: path=/opt/sge/ state=directory owner=sgeadmin group=sgeadmin recurse=yes
#- name: Create sge config file from template
#  template: src=sge_install_template.j2 dest=/opt/sge/sge_config.conf owner=sgeadmin group=sgeadmin
#- name: Create parallel environment files
#  copy: src={{ item }} dest=/home/galaxy/{{ item }} owner=sgeadmin group=sgeadmin mode=644
#  with_items:
#    - smp.conf
#    - mpi.conf
#- name: Create all.q file
#  copy: src={{ item }} dest={{ sge_root }}/all.q.conf owner=sgeadmin group=sgeadmin
#- name: Creating SGE request files
#  template: src=sge_request.j2 dest=/home/{{ item }}/.sge_request owner={{ item }} group={{ item }} mode=644
#  with_items:
#    - galaxy
#    - admin
#- name: Fix sge/util/arch file for ubuntu
#  copy: src=sge_arch dest=/opt/sge/util/arch owner=sgeadmin group=sgeadmin mode=755


- name: Configure PostgreSQL
  lineinfile: dest=/etc/bash.bashrc line="export PATH=/usr/lib/postgresql/{{ postgres_version }}/bin:$PATH" state=present regexp="export PATH=/usr/lib/postgresql/{{ postgres_version }}/bin"

- name: Getting proFTPd
  get_url: url=ftp://ftp.tpnet.pl/pub/linux/proftpd/distrib/source/{{ proftpd_pkg }}.tar.gz dest=/tmp/{{ proftpd_pkg }}.tar.gz
- name: Untarring proFTPd source
  command: tar xvfz {{ proftpd_pkg }}.tar.gz chdir=/tmp
- name: Configuring makefile for proFTPd
  command: chdir=/tmp/{{ proftpd_pkg }} ./configure --prefix=/opt/proftpd --disable-auth-file --disable-ncurses --disable-ident --disable-shadow --enable-openssl --with-modules=mod_sql:mod_sql_postgres:mod_sql_passwd --with-libraries=/usr/lib/postgresql/{{ postgres_version }}/lib
  environment:
    CFLAGS: -I/usr/include/postgresql
- name: Making proFTPd
  command: make chdir=/tmp/{{ proftpd_pkg }}
- name: Install proFTPd
  command: make install chdir=/tmp/{{ proftpd_pkg }}
- name: Cleaning up post making
  command: make clean chdir=/tmp/{{ proftpd_pkg }}

- name: Uploading proFTPd init file template
  template: src=proftpd.initd.j2 dest=/etc/init.d/proftpd mode=755
- name: Uploading proFTPd config file
  template: src=proftpd.conf.j2 dest=/opt/proftpd/etc/proftpd.conf
- name: Uploading welcome message
  copy: src=welcome_msg.txt dest=/opt/proftpd/etc/welcome_msg.txt
- name: Stowing proFTPd
  command: stow proftpd chdir=/opt
- name: Add proFTPd to default run levels
  service: name=proftpd enabled=yes

# Install tools
#- include: tools.yml

- name: Fix ownership of all tools
  file: path={{ tool_path }} owner=galaxy group=galaxy recurse=yes state=directory

- name: Add tools to NFS exports
  lineinfile: dest=/etc/exports
              regexp="{{ tool_path }}"
              state=present
              line="{{ tool_path }}              *(rw,sync,no_root_squash,no_subtree_check)"
- name: Add galaxy path to NFS exports
  lineinfile: dest=/etc/exports
              regexp="{{ galaxy_path }}"
              state=present
              line="{{ tool_path }}    *(rw,sync,no_root_squash,no_subtree_check)"
